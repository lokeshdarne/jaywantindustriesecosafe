---
// No props needed for this simple header
const navItems = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About Us" },
  { href: "/services", label: "Services" },
  { href: "/contact", label: "Contact Us" },
];
---

<header class="sticky top-0 z-50 bg-brand-surface/80 backdrop-blur-md border-b border-brand-border shadow-subtle"> {/* Adjusted background, blur, border, shadow */}
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <div class="flex-shrink-0">
        <a href="/" class="text-2xl font-bold text-brand-primary hover:text-brand-primary-dark transition-colors"> {/* Changed text color to primary */}
          Jaywant Industries
        </a>
      </div>
      <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            class:list={[
              "inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium transition-colors duration-200",
              Astro.url.pathname === item.href
                ? "border-brand-primary text-brand-text-primary" // Active state
                : "border-transparent text-brand-text-secondary hover:border-brand-primary/50 hover:text-brand-text-primary", // Inactive state
            ]}
            aria-current={Astro.url.pathname === item.href ? 'page' : undefined}
          >
            {item.label}
          </a>
        ))}
      </div>
      <!-- Mobile menu button -->
      <div class="-mr-2 flex items-center sm:hidden">
        <button type="button" class="inline-flex items-center justify-center p-2 rounded-md text-brand-text-secondary hover:text-brand-text-primary hover:bg-brand-primary/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-brand-primary" aria-controls="mobile-menu" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          {/* Icons remain the same, colors handled by text- classes */}
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </nav>

  <!-- Mobile menu -->
  <div class="sm:hidden hidden bg-brand-surface/95 backdrop-blur-md border-t border-brand-border" id="mobile-menu"> {/* Added background and border */}
    <div class="pt-2 pb-3 space-y-1">
      {navItems.map((item) => (
        <a
          href={item.href}
          class:list={[
            "block pl-3 pr-4 py-2 border-l-4 text-base font-medium transition-colors duration-200",
             Astro.url.pathname === item.href
              ? 'bg-brand-primary/10 border-brand-primary text-brand-primary' // Active state
              : 'border-transparent text-brand-text-secondary hover:bg-brand-primary/5 hover:border-brand-primary/50 hover:text-brand-text-primary' // Inactive state
          ]}
          aria-current={Astro.url.pathname === item.href ? 'page' : undefined}
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>
</header>

<script>
  // Basic mobile menu toggle (no changes needed here)
  const btn = document.querySelector("button[aria-controls='mobile-menu']");
  const menu = document.getElementById("mobile-menu");
  const openIcon = btn?.querySelector("svg:first-of-type");
  const closeIcon = btn?.querySelector("svg:last-of-type");

  btn?.addEventListener("click", () => {
    const expanded = btn.getAttribute("aria-expanded") === "true" || false;
    btn.setAttribute("aria-expanded", !expanded);
    menu?.classList.toggle("hidden");
    openIcon?.classList.toggle("hidden");
    openIcon?.classList.toggle("block");
    closeIcon?.classList.toggle("hidden");
    closeIcon?.classList.toggle("block");
  });
</script>
